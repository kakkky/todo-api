// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface_task_query_service.go
//
// Generated by this command:
//
//	mockgen -package=task -source=./interface_task_query_service.go -destination=./mock_task_query_service.go
//

// Package task is a generated GoMock package.
package task

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskQueryService is a mock of TaskQueryService interface.
type MockTaskQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskQueryServiceMockRecorder
	isgomock struct{}
}

// MockTaskQueryServiceMockRecorder is the mock recorder for MockTaskQueryService.
type MockTaskQueryServiceMockRecorder struct {
	mock *MockTaskQueryService
}

// NewMockTaskQueryService creates a new mock instance.
func NewMockTaskQueryService(ctrl *gomock.Controller) *MockTaskQueryService {
	mock := &MockTaskQueryService{ctrl: ctrl}
	mock.recorder = &MockTaskQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskQueryService) EXPECT() *MockTaskQueryServiceMockRecorder {
	return m.recorder
}

// FetchAllTasks mocks base method.
func (m *MockTaskQueryService) FetchAllTasks(ctx context.Context) ([]*FetchTaskDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllTasks", ctx)
	ret0, _ := ret[0].([]*FetchTaskDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllTasks indicates an expected call of FetchAllTasks.
func (mr *MockTaskQueryServiceMockRecorder) FetchAllTasks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllTasks", reflect.TypeOf((*MockTaskQueryService)(nil).FetchAllTasks), ctx)
}

// FetchTaskById mocks base method.
func (m *MockTaskQueryService) FetchTaskById(ctx context.Context, id string) (*FetchTaskDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTaskById", ctx, id)
	ret0, _ := ret[0].(*FetchTaskDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTaskById indicates an expected call of FetchTaskById.
func (mr *MockTaskQueryServiceMockRecorder) FetchTaskById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTaskById", reflect.TypeOf((*MockTaskQueryService)(nil).FetchTaskById), ctx, id)
}

// FetchUserTasks mocks base method.
func (m *MockTaskQueryService) FetchUserTasks(ctx context.Context, userId string) ([]*FetchTaskDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserTasks", ctx, userId)
	ret0, _ := ret[0].([]*FetchTaskDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserTasks indicates an expected call of FetchUserTasks.
func (mr *MockTaskQueryServiceMockRecorder) FetchUserTasks(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserTasks", reflect.TypeOf((*MockTaskQueryService)(nil).FetchUserTasks), ctx, userId)
}
