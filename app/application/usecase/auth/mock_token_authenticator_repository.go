// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface_token_authenticator_repository.go
//
// Generated by this command:
//
//	mockgen -package=auth -source=./interface_token_authenticator_repository.go -destination=./mock_token_authenticator_repository.go
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenAuthenticatorRepository is a mock of TokenAuthenticatorRepository interface.
type MockTokenAuthenticatorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokenAuthenticatorRepositoryMockRecorder
	isgomock struct{}
}

// MockTokenAuthenticatorRepositoryMockRecorder is the mock recorder for MockTokenAuthenticatorRepository.
type MockTokenAuthenticatorRepositoryMockRecorder struct {
	mock *MockTokenAuthenticatorRepository
}

// NewMockTokenAuthenticatorRepository creates a new mock instance.
func NewMockTokenAuthenticatorRepository(ctrl *gomock.Controller) *MockTokenAuthenticatorRepository {
	mock := &MockTokenAuthenticatorRepository{ctrl: ctrl}
	mock.recorder = &MockTokenAuthenticatorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenAuthenticatorRepository) EXPECT() *MockTokenAuthenticatorRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTokenAuthenticatorRepository) Delete(ctx context.Context, user_id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenAuthenticatorRepositoryMockRecorder) Delete(ctx, user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenAuthenticatorRepository)(nil).Delete), ctx, user_id)
}

// Load mocks base method.
func (m *MockTokenAuthenticatorRepository) Load(ctx context.Context, user_id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, user_id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockTokenAuthenticatorRepositoryMockRecorder) Load(ctx, user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockTokenAuthenticatorRepository)(nil).Load), ctx, user_id)
}

// Save mocks base method.
func (m *MockTokenAuthenticatorRepository) Save(ctx context.Context, duration time.Duration, userID, jwtID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, duration, userID, jwtID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTokenAuthenticatorRepositoryMockRecorder) Save(ctx, duration, userID, jwtID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTokenAuthenticatorRepository)(nil).Save), ctx, duration, userID, jwtID)
}
