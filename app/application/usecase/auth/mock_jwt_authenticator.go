// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface_jwt_authenticator.go
//
// Generated by this command:
//
//	mockgen -package=auth -source=./interface_jwt_authenticator.go -destination=./mock_jwt_authenticator.go
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt"
	gomock "go.uber.org/mock/gomock"
)

// MockJwtAuthenticator is a mock of JwtAuthenticator interface.
type MockJwtAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockJwtAuthenticatorMockRecorder
	isgomock struct{}
}

// MockJwtAuthenticatorMockRecorder is the mock recorder for MockJwtAuthenticator.
type MockJwtAuthenticatorMockRecorder struct {
	mock *MockJwtAuthenticator
}

// NewMockJwtAuthenticator creates a new mock instance.
func NewMockJwtAuthenticator(ctrl *gomock.Controller) *MockJwtAuthenticator {
	mock := &MockJwtAuthenticator{ctrl: ctrl}
	mock.recorder = &MockJwtAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtAuthenticator) EXPECT() *MockJwtAuthenticatorMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockJwtAuthenticator) GenerateToken(sub, jwtID string) *jwt.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", sub, jwtID)
	ret0, _ := ret[0].(*jwt.Token)
	return ret0
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJwtAuthenticatorMockRecorder) GenerateToken(sub, jwtID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJwtAuthenticator)(nil).GenerateToken), sub, jwtID)
}

// GetJwtIDFromClaim mocks base method.
func (m *MockJwtAuthenticator) GetJwtIDFromClaim(token *jwt.Token) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJwtIDFromClaim", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJwtIDFromClaim indicates an expected call of GetJwtIDFromClaim.
func (mr *MockJwtAuthenticatorMockRecorder) GetJwtIDFromClaim(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJwtIDFromClaim", reflect.TypeOf((*MockJwtAuthenticator)(nil).GetJwtIDFromClaim), token)
}

// GetSubFromClaim mocks base method.
func (m *MockJwtAuthenticator) GetSubFromClaim(token *jwt.Token) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubFromClaim", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubFromClaim indicates an expected call of GetSubFromClaim.
func (mr *MockJwtAuthenticatorMockRecorder) GetSubFromClaim(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubFromClaim", reflect.TypeOf((*MockJwtAuthenticator)(nil).GetSubFromClaim), token)
}

// SignToken mocks base method.
func (m *MockJwtAuthenticator) SignToken(token *jwt.Token) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignToken indicates an expected call of SignToken.
func (mr *MockJwtAuthenticatorMockRecorder) SignToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignToken", reflect.TypeOf((*MockJwtAuthenticator)(nil).SignToken), token)
}

// VerifyExpiresAt mocks base method.
func (m *MockJwtAuthenticator) VerifyExpiresAt(token *jwt.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyExpiresAt", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyExpiresAt indicates an expected call of VerifyExpiresAt.
func (mr *MockJwtAuthenticatorMockRecorder) VerifyExpiresAt(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyExpiresAt", reflect.TypeOf((*MockJwtAuthenticator)(nil).VerifyExpiresAt), token)
}

// VerifyToken mocks base method.
func (m *MockJwtAuthenticator) VerifyToken(signedToken string) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", signedToken)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockJwtAuthenticatorMockRecorder) VerifyToken(signedToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockJwtAuthenticator)(nil).VerifyToken), signedToken)
}
